# Workflow CI/CD untuk Scraper Tender App
#
# Fungsi utama:
# - Build & test aplikasi Node.js (Express + PostgreSQL) dan image Docker setiap push ke branch master
# - Push image Docker ke DockerHub
# - Deploy otomatis ke NAS (Synology/Server) menggunakan docker-compose
# - Verifikasi deployment berjalan lancar
#
# Penjelasan job:
# 1. build-and-test: Build image Docker, test, dan push ke DockerHub
# 2. deploy-to-nas: Deploy image terbaru ke NAS, jalankan docker-compose up -d
# 3. verify-deployment: Cek container sudah running dan aplikasi bisa diakses
#
# Environment variable penting:
# - DOCKERHUB_USERNAME, DOCKERHUB_TOKEN: Untuk push/pull image Docker
# - NAS_HOST, NAS_USERNAME, NAS_PASSWORD, NAS_PORT: Untuk akses SSH ke NAS
#
# Tips troubleshooting:
# - Pastikan NAS sudah install Docker & docker-compose
# - Cek log container jika aplikasi tidak jalan: docker logs skk_tender_app
# - Pastikan port 3002 di NAS terbuka
#
# Alur singkat:
# Push ke master → Build & push image → Deploy ke NAS → Verifikasi otomatis

name: CI/CD Pipeline Scraper Tender App

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  DOCKER_IMAGE_NAME: farrelmamengko/scraping-data

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-nas:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create docker-compose file
        run: |
          cat > docker-compose.yml << EOF
          version: '3.8'
          services:
            db:
              container_name: skk_tender_db
              image: postgres:14
              restart: always
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 10s
                timeout: 5s
                retries: 5
                start_period: 30s
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres123
                POSTGRES_DB: skk_tender
                PGDATA: /var/lib/postgresql/data/pgdata
              ports:
                - "5434:5432"
              volumes:
                - postgres_data:/var/lib/postgresql/data
                - ./migrations:/docker-entrypoint-initdb.d
              command: 
                - "postgres"
                - "-c"
                - "max_connections=200"
                - "-c"
                - "shared_buffers=256MB"

            app:
              container_name: skk_tender_app
              image: ${{ env.DOCKER_IMAGE_NAME }}:latest
              ports:
                - "3002:3000"
              restart: always
              environment:
                - NODE_ENV=production
                - DB_HOST=db
                - DB_PORT=5432
                - DB_USER=postgres
                - DB_PASSWORD=postgres123
                - DB_NAME=skk_tender
                - WAIT_HOSTS=db:5432
                - WAIT_TIMEOUT=300
              depends_on:
                db:
                  condition: service_healthy
              volumes:
                - ./data:/app/data
                - ./downloaded_pdfs:/app/downloaded_pdfs
                - pdf_downloads:/app/src/download\\ pdf

          volumes:
            pdf_downloads:
            postgres_data:
              driver: local
          EOF
          
          cat docker-compose.yml
      
      - name: Set permission folder target di NAS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NAS_HOST }}
          port: ${{ secrets.NAS_PORT }}
          username: ${{ secrets.NAS_USERNAME }}
          password: ${{ secrets.NAS_PASSWORD }}
          script: |
            echo "${{ secrets.NAS_PASSWORD }}" | sudo -S chown -R ${{ secrets.NAS_USERNAME }}:root /volume1/docker/skk-tender-staging
            echo "${{ secrets.NAS_PASSWORD }}" | sudo -S chmod -R 775 /volume1/docker/skk-tender-staging
      
      - name: Upload docker-compose.yml to NAS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.NAS_HOST }}
          username: ${{ secrets.NAS_USERNAME }}
          password: ${{ secrets.NAS_PASSWORD }}
          port: ${{ secrets.NAS_PORT }}
          source: "docker-compose.yml"
          target: "/volume1/docker/skk-tender-staging"
          overwrite: true
          
      - name: Deploy & Start Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NAS_HOST }}
          username: ${{ secrets.NAS_USERNAME }}
          password: ${{ secrets.NAS_PASSWORD }}
          port: ${{ secrets.NAS_PORT }}
          script_stop: true
          script: |
            # Masuk ke direktori target
            cd /volume1/docker/skk-tender-staging
            
            # Persiapkan folder dan permission
            echo "Mempersiapkan folder dan permission..."
            mkdir -p ./data ./downloaded_pdfs ./migrations
            chmod -R 777 ./data ./downloaded_pdfs ./migrations
            
            # Buat file migrasi
            cat > migrations/init.sql << 'EOF'
            -- Create procurement_list table
            CREATE TABLE IF NOT EXISTS procurement_list (
                id VARCHAR(255) PRIMARY KEY,
                judul TEXT NOT NULL,
                deskripsi TEXT,
                tanggal DATE,
                kkks TEXT,
                golonganUsaha TEXT,
                jenisPengadaan TEXT,
                bidangUsaha TEXT,
                batasWaktu TEXT,
                url TEXT,
                tipe_tender TEXT,
                createdAt TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                updatedAt TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );

            -- Create attachments table
            CREATE TABLE IF NOT EXISTS attachments (
                id SERIAL PRIMARY KEY,
                tender_id VARCHAR(255) REFERENCES procurement_list(id),
                attachment_id VARCHAR(255),
                attachment_name TEXT,
                attachment_url TEXT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );

            -- Create indexes
            CREATE INDEX IF NOT EXISTS idx_procurement_tipe ON procurement_list(tipe_tender);
            CREATE INDEX IF NOT EXISTS idx_procurement_date ON procurement_list(tanggal);
            CREATE INDEX IF NOT EXISTS idx_attachments_tender ON attachments(tender_id);
            EOF
            
            # Set permission file migrasi
            chmod 644 migrations/init.sql
            
            # Set Docker commands
            docker_cmd="/usr/local/bin/docker"
            
            # Stop dan remove container lama
            echo "Stopping and removing old containers..."
            $docker_cmd compose down -v || true
            
            # Hapus image lama
            echo "Removing old images..."
            $docker_cmd rmi ${{ env.DOCKER_IMAGE_NAME }}:latest || true
            
            # Login ke Docker Hub
            echo "Logging in to Docker Hub..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | $docker_cmd login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Pull latest image
            echo "Pulling latest image..."
            $docker_cmd pull ${{ env.DOCKER_IMAGE_NAME }}:latest
            
            # Start container dengan logging
            echo "Starting containers..."
            $docker_cmd compose up -d
            
            # Tunggu database siap
            echo "Waiting for database to be ready..."
            for i in {1..30}; do
              if $docker_cmd exec skk_tender_db pg_isready -U postgres; then
                echo "Database is ready!"
                break
              fi
              if [ $i -eq 30 ]; then
                echo "Error: Database failed to become ready"
                exit 1
              fi
              sleep 2
            done
            
            # Verifikasi migrasi berhasil
            echo "Verifying database migration..."
            if ! $docker_cmd exec skk_tender_db psql -U postgres -d skk_tender -c "\dt" | grep -q "procurement_list"; then
              echo "Error: Database migration failed - tables not created"
              exit 1
            fi
            
            echo "Deployment completed successfully!"

  verify-deployment:
    needs: deploy-to-nas
    runs-on: ubuntu-latest
    steps:
      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NAS_HOST }}
          username: ${{ secrets.NAS_USERNAME }}
          password: ${{ secrets.NAS_PASSWORD }}
          port: ${{ secrets.NAS_PORT }}
          script: |
            cd /volume1/docker/skk-tender-staging
            
            # Set Docker command
            docker_cmd="/usr/local/bin/docker"
            
            # Cek status container
            echo "Current running containers:"
            $docker_cmd ps
            
            # Cek logs untuk error
            echo "Container logs:"
            $docker_cmd logs --tail 50 skk_tender_app
            $docker_cmd logs --tail 50 skk_tender_db
            
            # Verifikasi aplikasi berjalan
            if ! $docker_cmd ps | grep -q "skk_tender_app.*Up.*3002"; then
              echo "Error: Application container not running properly"
              exit 1
            fi
            
            # Verifikasi database berjalan
            if ! $docker_cmd ps | grep -q "skk_tender_db.*Up.*5434"; then
              echo "Error: Database container not running properly"
              exit 1
            fi
            
            # Cek koneksi ke aplikasi
            if ! curl -s -f http://localhost:3002 > /dev/null; then
              echo "Error: Application not responding"
              exit 1
            fi
            
            echo "All verification checks passed successfully!" 