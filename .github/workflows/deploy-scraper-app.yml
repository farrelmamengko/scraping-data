# Workflow CI/CD untuk Scraper Tender App
#
# Fungsi utama:
# - Build & test aplikasi Node.js (Express + PostgreSQL) dan image Docker setiap push ke branch master
# - Push image Docker ke DockerHub
# - Deploy otomatis ke NAS (Synology/Server) menggunakan docker-compose
# - Verifikasi deployment berjalan lancar
#
# Penjelasan job:
# 1. build-and-test: Build image Docker, test, dan push ke DockerHub
# 2. deploy-to-nas: Deploy image terbaru ke NAS, jalankan docker-compose up -d
# 3. verify-deployment: Cek container sudah running dan aplikasi bisa diakses
#
# Environment variable penting:
# - DOCKERHUB_USERNAME, DOCKERHUB_TOKEN: Untuk push/pull image Docker
# - NAS_HOST, NAS_USERNAME, NAS_PASSWORD, NAS_PORT: Untuk akses SSH ke NAS
#
# Tips troubleshooting:
# - Pastikan NAS sudah install Docker & docker-compose
# - Cek log container jika aplikasi tidak jalan: docker logs skk_tender_app
# - Pastikan port 3002 di NAS terbuka
#
# Alur singkat:
# Push ke master → Build & push image → Deploy ke NAS → Verifikasi otomatis

name: CI/CD Pipeline Scraper Tender App

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  DOCKER_IMAGE_NAME: farrelmamengko/scraping-data

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-nas:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create docker-compose file
        run: |
          cat > docker-compose.yml << EOF
          version: '3.8'
          services:
            app:
              container_name: skk_tender_app
              image: ${{ env.DOCKER_IMAGE_NAME }}:latest
              ports:
                - "3002:3000"
              restart: unless-stopped
              environment:
                - NODE_ENV=production
                - DB_HOST=db
                - DB_PORT=5432
                - DB_USER=postgres
                - DB_PASSWORD=postgres123
                - DB_NAME=skk_tender
              depends_on:
                db:
                  condition: service_healthy
              volumes:
                - ./data:/app/data
                - ./downloaded_pdfs:/app/downloaded_pdfs
                - pdf_downloads:/app/src/download\\ pdf

            db:
              container_name: skk_tender_db
              image: postgres:14
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "pg_isready", "-U", "postgres"]
                interval: 5s
                timeout: 5s
                retries: 5
              environment:
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: postgres123
                POSTGRES_DB: skk_tender
              ports:
                - "5433:5432"
              volumes:
                - postgres_data:/var/lib/postgresql/data

          volumes:
            pdf_downloads:
            postgres_data:
          EOF
          
          cat docker-compose.yml
      
      - name: Set permission folder target di NAS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NAS_HOST }}
          port: ${{ secrets.NAS_PORT }}
          username: ${{ secrets.NAS_USERNAME }}
          password: ${{ secrets.NAS_PASSWORD }}
          script: |
            echo "${{ secrets.NAS_PASSWORD }}" | sudo -S chown -R ${{ secrets.NAS_USERNAME }}:root /volume1/docker/skk-tender-staging
            echo "${{ secrets.NAS_PASSWORD }}" | sudo -S chmod -R 775 /volume1/docker/skk-tender-staging
      
      - name: Upload docker-compose.yml to NAS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.NAS_HOST }}
          username: ${{ secrets.NAS_USERNAME }}
          password: ${{ secrets.NAS_PASSWORD }}
          port: ${{ secrets.NAS_PORT }}
          source: "docker-compose.yml"
          target: "/volume1/docker/skk-tender-staging"
          overwrite: true
          
      - name: Deploy & Start Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NAS_HOST }}
          username: ${{ secrets.NAS_USERNAME }}
          password: ${{ secrets.NAS_PASSWORD }}
          port: ${{ secrets.NAS_PORT }}
          script_stop: true
          script: |
            # Masuk ke direktori target
            cd /volume1/docker/skk-tender-staging
            
            # Persiapkan folder dan permission
            echo "Mempersiapkan folder dan permission..."
            mkdir -p ./data ./downloaded_pdfs
            chmod -R 777 ./data ./downloaded_pdfs
            ls -la
            
            # Set Docker commands
            docker_cmd="/usr/local/bin/docker"
            
            # Tentukan compose command
            if $docker_cmd compose version &> /dev/null; then
              compose_cmd="$docker_cmd compose"
            else
              for cmd in "/usr/local/bin/docker-compose" "/volume1/@appstore/Docker/usr/bin/docker-compose" "/usr/bin/docker-compose"; do
                if [ -x "$cmd" ]; then
                  compose_cmd="$cmd"
                  break
                fi
              done
            fi
            
            # Login ke Docker Hub
            echo "Logging in to Docker Hub..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | $docker_cmd login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # Pull latest image
            echo "Pulling latest image..."
            $docker_cmd pull ${{ env.DOCKER_IMAGE_NAME }}:latest  
            
            # Tampilkan image yang dipull
            echo "Verifying pulled images..."
            $docker_cmd images | grep "${{ env.DOCKER_IMAGE_NAME }}"
            
            # Stop dan hapus container yang ada
            echo "Stopping existing containers..."
            $compose_cmd down
            
            # Hapus volume lama jika ada untuk fresh start
            echo "Cleaning up old volumes..."
            $docker_cmd volume rm -f pdf_downloads postgres_data || true
            
            # Jalankan container baru
            echo "Starting new containers..."
            $compose_cmd up -d --force-recreate
            
            # Verifikasi deployment
            echo "Verifying deployment..."
            $compose_cmd ps
            $docker_cmd ps
            
            # Tunggu database siap (15 detik)
            echo "Menunggu database siap..."
            sleep 15
            
            # Restart app container untuk memastikan koneksi ke database
            echo "Restart app container..."
            $docker_cmd restart skk_tender_app
            
            # Bersihkan image lama
            echo "Cleaning up old images..."
            $docker_cmd image prune -f
            
            # Logout dari Docker Hub
            $docker_cmd logout
            
            echo "Deployment completed"

  verify-deployment:
    needs: deploy-to-nas
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NAS_HOST }}
          username: ${{ secrets.NAS_USERNAME }}
          password: ${{ secrets.NAS_PASSWORD }}
          port: ${{ secrets.NAS_PORT }}
          script: |
            cd /volume1/docker/skk-tender-staging
            # Gunakan path absolut ke binary docker
            DOCKER="/usr/local/bin/docker"
            COMPOSE="/usr/local/bin/docker-compose"
            
            # Tunggu container siap (12 x 5 detik = 60 detik max)
            echo "Menunggu container untuk siap..."
            MAX_ATTEMPTS=12
            ATTEMPTS=0
            CONTAINER_RUNNING=""
            
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              CONTAINER_RUNNING=$(echo "${{ secrets.NAS_PASSWORD }}" | sudo -S $DOCKER ps -f name=skk_tender_app -f status=running --format '{{.Names}}')
              if [ ! -z "$CONTAINER_RUNNING" ]; then
                echo "Container berhasil running!"
                break
              fi
              echo "Container belum siap, mencoba lagi dalam 5 detik ($ATTEMPTS/$MAX_ATTEMPTS)..."
              sleep 5
              ATTEMPTS=$((ATTEMPTS+1))
            done
            
            if [ -z "$CONTAINER_RUNNING" ]; then
              echo "Container tidak berjalan setelah beberapa percobaan!"
              echo "Docker logs skk_tender_app:"
              echo "${{ secrets.NAS_PASSWORD }}" | sudo -S $DOCKER logs skk_tender_app 2>&1 || echo "Tidak ada container skk_tender_app"
              echo "Docker logs skk_tender_db:"
              echo "${{ secrets.NAS_PASSWORD }}" | sudo -S $DOCKER logs skk_tender_db 2>&1 || echo "Tidak ada container skk_tender_db"
              echo "Docker ps output:"
              echo "${{ secrets.NAS_PASSWORD }}" | sudo -S $DOCKER ps -a
              echo "${{ secrets.NAS_PASSWORD }}" | sudo -S $COMPOSE logs
              exit 1
            fi
            
            echo "Container berjalan sukses!"
            echo "${{ secrets.NAS_PASSWORD }}" | sudo -S $DOCKER logs --tail 20 skk_tender_app 