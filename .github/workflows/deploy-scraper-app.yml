name: Deploy Scraper Tender App ke NAS

on:
  push:
    branches: [ master ]  # Sesuaikan dengan branch Anda
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/scraper-tender-app:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Install SSH client and sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client sshpass netcat-openbsd
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        chmod 600 ~/.ssh/known_hosts
    
    - name: Deploy to NAS
      env:
        SSHPASS: ${{ secrets.NAS_PASSWORD }}
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        APP_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/scraper-tender-app:latest
        TARGET_DIR: /volume1/docker/skk-tender-staging
      run: |
        export SSHPASS="$SSHPASS"
        
        echo "Verifikasi direktori target..."
        sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} "ls -la $TARGET_DIR"
        
        echo "Menjalankan deployment ke NAS..."
        sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} "
          # Direktori sudah ada: $TARGET_DIR
          cd $TARGET_DIR
          
          # Docker dan Docker Compose
          docker_cmd=\$(which docker || echo '/usr/local/bin/docker')
          compose_cmd='docker compose'
          
          # Cek jika docker compose plugin tidak tersedia
          if ! \$docker_cmd compose version &> /dev/null; then
            compose_cmd=\$(which docker-compose || echo '/usr/local/bin/docker-compose')
          fi
          
          # Login ke DockerHub
          echo \"${DOCKERHUB_TOKEN}\" | \$docker_cmd login -u \"${DOCKERHUB_USERNAME}\" --password-stdin
          
          # Buat docker-compose.yml
          echo \"Membuat docker-compose.yml...\"
          cat > docker-compose.yml << 'EOL'
          version: '3.8'
          services:
            app:
              container_name: scraper_tender_app
              image: IMAGE_PLACEHOLDER
              ports:
                - \"3002:3000\"
              restart: unless-stopped
              volumes:
                - ./data:/app/data
          EOL
          
          # Ganti placeholder
          sed -i \"s|IMAGE_PLACEHOLDER|${APP_IMAGE}|g\" docker-compose.yml
          
          echo \"File docker-compose.yml dibuat di $TARGET_DIR\"
          cat docker-compose.yml
          
          # Pull image terbaru
          echo \"Pulling image: ${APP_IMAGE}\"
          \$docker_cmd pull ${APP_IMAGE}
          
          # Deploy dengan docker-compose atau docker run
          if [ -x \"\$compose_cmd\" ] || \$docker_cmd compose version &> /dev/null; then
            echo \"Deploying dengan \$compose_cmd...\"
            if [ \"\$compose_cmd\" = \"docker compose\" ]; then
              \$docker_cmd compose down 2>/dev/null || true
              \$docker_cmd compose up -d
            else
              \$compose_cmd down 2>/dev/null || true
              \$compose_cmd up -d
            fi
          else
            echo \"Docker Compose tidak ditemukan, deploying dengan docker run...\"
            \$docker_cmd stop scraper_tender_app 2>/dev/null || true
            \$docker_cmd rm scraper_tender_app 2>/dev/null || true
            
            \$docker_cmd run -d \\
              --name scraper_tender_app \\
              --restart unless-stopped \\
              -p 3002:3000 \\
              -v \"\$(pwd)/data:/app/data\" \\
              ${APP_IMAGE}
          fi
          
          # Bersihkan image lama
          \$docker_cmd image prune -f
          
          # Tampilkan status
          echo \"Status container:\"
          \$docker_cmd ps | grep scraper_tender_app
          
          echo \"Deployment berhasil selesai\"
          echo \"Aplikasi tersedia di http://\$(hostname -I | awk '{print \$1}'):3002\"
        " 