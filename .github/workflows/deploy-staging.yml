# .github/workflows/deploy-staging.yml
name: Deploy to NAS Staging (Docker Hub)

on:
  push:
    branches:
      - master # Jalankan saat push ke branch 'master'
  workflow_dispatch: # Izinkan trigger manual

# Variabel Lingkungan untuk workflow
env:
  # Nama image di Docker Hub
  IMAGE_NAME: farrelmamengko/scraping-data
  # URL Repositori GitHub Anda
  REPO_URL: https://github.com/farrelmamengko/scraping-data.git
  # Branch yang digunakan
  GIT_BRANCH: master

jobs:
  build-and-push:
    name: Build and Push Docker Image to Docker Hub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login ke Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Setup QEMU (diperlukan untuk build multi-platform, opsional tapi bagus)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Setup Docker Buildx (untuk build yang lebih efisien)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Extract metadata (tags, labels) for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', env.GIT_BRANCH) }}

      # Build dan push ke Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # (Opsional) Tambahkan platform jika diperlukan (misal jika NAS Anda ARM)
          # platforms: linux/amd64,linux/arm64 

  deploy-to-nas:
    name: Deploy to NAS
    needs: build-and-push # Jalankan setelah build selesai
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to NAS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.NAS_HOST }}
          port: ${{ secrets.NAS_PORT }}
          username: ${{ secrets.NAS_USERNAME }}
          password: ${{ secrets.NAS_PASSWORD }}
          script: |
            PROJECT_PATH="${{ secrets.NAS_PROJECT_PATH }}"
            REPO_URL="${{ env.REPO_URL }}"
            BRANCH="${{ env.GIT_BRANCH }}"

            # Pastikan direktori ada
            mkdir -p "$PROJECT_PATH"
            cd "$PROJECT_PATH"

            # Set agar script berhenti jika ada error
            set -e

            echo "Checking Git repository in $PROJECT_PATH..."
            if [ ! -d ".git" ] ; then
              echo "Cloning repository..."
              # Hapus isi folder jika ada (untuk clone bersih)
              rm -rf ./*
              rm -rf ./.??* # Hapus file dotfiles juga
              git clone --depth 1 --branch $BRANCH "$REPO_URL" .
            else
              echo "Updating repository..."
              git checkout $BRANCH || git checkout -b $BRANCH
              git fetch origin
              echo "Resetting to latest version from origin/$BRANCH..."
              git reset --hard origin/$BRANCH
              # Alternatif: git pull origin $BRANCH (lebih aman jika ada perubahan manual di NAS)
            fi

            echo "Ensuring data directory and database file..."
            mkdir -p data
            touch data/database.db
            # Jika perlu, atur izin, tapi sebaiknya user docker sudah benar
            # chmod 666 data/database.db

            # Periksa apakah docker-compose.prod.yml ada di repo
            if [ ! -f "docker-compose.prod.yml" ]; then
               echo "ERROR: docker-compose.prod.yml not found in repository root!"
               exit 1
            fi

            echo "Logging into Docker Hub on NAS..."
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            echo "Pulling latest image from Docker Hub..."
            docker compose -f docker-compose.prod.yml pull app

            echo "Restarting container..."
            docker compose -f docker-compose.prod.yml up -d --remove-orphans

            echo "Pruning old images..."
            docker image prune -f

            echo "Deployment successful!" 