# .github/workflows/deploy-staging.yml
name: Deploy to NAS Staging (Docker Hub)

on:
  push:
    branches:
      - master # Jalankan saat push ke branch 'master'
  workflow_dispatch: # Izinkan trigger manual

# Variabel Lingkungan untuk workflow
env:
  # Nama image di Docker Hub
  IMAGE_NAME: farrelmamengko/scraping-data
  # URL Repositori GitHub Anda (Tidak digunakan di skrip baru, tapi bisa disimpan)
  # REPO_URL: https://github.com/farrelmamengko/scraping-data.git
  # Branch yang digunakan (Tidak digunakan di skrip baru, tapi bisa disimpan)
  # GIT_BRANCH: master

jobs:
  build-and-push:
    name: Build and Push Docker Image to Docker Hub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login ke Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Setup QEMU (diperlukan untuk build multi-platform, opsional tapi bagus)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Setup Docker Buildx (untuk build yang lebih efisien)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Extract metadata (tags, labels) for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', env.GIT_BRANCH) }}

      # Build dan push ke Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # (Opsional) Tambahkan platform jika diperlukan (misal jika NAS Anda ARM)
          # platforms: linux/amd64,linux/arm64 

  deploy-to-nas:
    name: Deploy to NAS
    needs: build-and-push # Jalankan setelah build selesai
    runs-on: ubuntu-latest

    steps:
      - name: Install SSH tools
        run: |
          sudo apt-get update && sudo apt-get install -y openssh-client sshpass

      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          # Script ini akan dijalankan di NAS

          # Baca argumen posisi dari perintah ssh
          PROJECT_PATH="$1"
          DOCKERHUB_USER="$2"
          DOCKERHUB_TOKEN_SECRET="$3"
          IMAGE_NAME="$4"
          # Tambahkan tag :latest
          IMAGE_TO_PULL="${IMAGE_NAME}:latest"

          # Validasi argumen (opsional tapi bagus)
          if [ -z "$PROJECT_PATH" ] || [ -z "$DOCKERHUB_USER" ] || [ -z "$DOCKERHUB_TOKEN_SECRET" ] || [ -z "$IMAGE_NAME" ]; then
            echo "ERROR: Missing required arguments for deployment script."
            exit 1
          fi

          echo "Starting deployment to $PROJECT_PATH"
          echo "Ensuring target directory exists..."
          mkdir -p "$PROJECT_PATH"
          cd "$PROJECT_PATH"

          echo "Ensuring data subdirectory and database file..."
          mkdir -p data
          touch data/database.db
          # chmod 666 data/database.db

          set -e

          # Cari path Docker & Docker Compose
          docker_cmd="docker"
          compose_cmd="docker compose"
          if ! command -v docker &> /dev/null; then
            echo "Docker command not found in PATH, trying known locations..."
            for cmd_path in /usr/local/bin/docker /volume1/@appstore/Docker/usr/bin/docker /usr/bin/docker; do
              if [ -x "$cmd_path" ]; then docker_cmd="$cmd_path"; echo "Found Docker at $docker_cmd"; break; fi
            done
          fi
          if [ "$docker_cmd" == "docker" ] && ! command -v docker &> /dev/null; then echo "ERROR: Docker executable not found!"; exit 1; fi
          if ! $docker_cmd compose version &> /dev/null; then
            echo "Docker compose plugin not found, looking for standalone..."
            for cmd_path in /usr/local/bin/docker-compose /volume1/@appstore/Docker/usr/bin/docker-compose /usr/bin/docker-compose; do
              if [ -x "$cmd_path" ]; then compose_cmd="$cmd_path"; echo "Found standalone Docker Compose at $compose_cmd"; break; fi
            done
          fi
          if [ "$compose_cmd" == "docker compose" ] && ! $docker_cmd compose version &> /dev/null; then echo "WARNING: Docker Compose not found."; fi

          echo "Logging into Docker Hub on NAS..."
          echo "$DOCKERHUB_TOKEN_SECRET" | $docker_cmd login -u "$DOCKERHUB_USER" --password-stdin

          # Membuat atau memperbarui docker-compose.prod.yml DI NAS
          echo "Creating/Updating docker-compose.prod.yml on NAS..."
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          services:
            app:
              container_name: skk_tender_app_staging
              image: ${IMAGE_NAME_VAR}
              ports:
                - "3001:3000"
              volumes:
                - ./data/database.db:/app/database.db
                - pdf_downloads:/app/src/download\\ pdf
              restart: unless-stopped
          volumes:
            pdf_downloads:
          EOF
          sed -i "s|\\\${IMAGE_NAME_VAR}|${IMAGE_TO_PULL}|g" docker-compose.prod.yml

          echo "Pulling latest image: ${IMAGE_TO_PULL}"
          $compose_cmd -f docker-compose.prod.yml pull app

          echo "Restarting container using docker-compose.prod.yml..."
          $compose_cmd -f docker-compose.prod.yml up -d --remove-orphans

          echo "Pruning old images..."
          $docker_cmd image prune -f

          echo "Deployment successful!"

          EOL
          # Akhir dari skrip deploy.sh

          chmod +x deploy.sh
          echo "Deployment script created."

      # 3. Salin Skrip ke NAS menggunakan scp via sshpass, menggunakan direktori deploy yang sudah ada
      - name: Copy deployment script to NAS
        env:
          SSHPASS: ${{ secrets.NAS_PASSWORD }}
        run: |
          echo "Copying deployment script to NAS..."
          # Salin file deploy.sh ke direktori deploy yang sudah ada (tanpa perlu mkdir)
          sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P ${{ secrets.NAS_PORT }} deploy.sh ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }}:/var/services/homes/gda_jhos/deploy/deploy.sh
          echo "Script copied."

      # 4. Eksekusi Skrip di NAS via SSH menggunakan sshpass
      - name: Execute deployment script on NAS
        env:
          SSHPASS: ${{ secrets.NAS_PASSWORD }}
          # Masih perlu pass variabel agar skrip di NAS bisa mengaksesnya via export
          NAS_PROJECT_PATH_SECRET: ${{ secrets.NAS_PROJECT_PATH }}
          DOCKERHUB_USERNAME_SECRET: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN_SECRET: ${{ secrets.DOCKERHUB_TOKEN }}
          IMAGE_NAME_SECRET: ${{ env.IMAGE_NAME }}
        run: |
          echo "Executing deployment script on NAS: ${{ secrets.NAS_HOST }}"
          # Definisi perintah SSH dengan export variabel sebelum menjalankan skrip
          # Menggunakan nama variabel unik untuk menghindari konflik dan memastikan escaping
          SSH_COMMAND="export PROJECT_PATH='${NAS_PROJECT_PATH_SECRET//'/\'\''}' ; \
                       export DOCKERHUB_USER='${DOCKERHUB_USERNAME_SECRET//'/\'\''}' ; \
                       export DOCKERHUB_TOKEN_SECRET='${DOCKERHUB_TOKEN_SECRET//'/\'\''}' ; \
                       export IMAGE_NAME='${IMAGE_NAME_SECRET//'/\'\''}' ; \
                       bash /var/services/homes/gda_jhos/deploy/deploy.sh" # Menggunakan direktori deploy yang sudah ada

          # Menggunakan sshpass -e untuk membaca password dari env var SSHPASS
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} \"${SSH_COMMAND}\"
          echo "Script execution finished."

      # 5. Hapus Skrip dari NAS (Opsional, untuk kebersihan)
      - name: Cleanup script on NAS
        if: always() # Jalankan meskipun langkah sebelumnya gagal
        env:
          SSHPASS: ${{ secrets.NAS_PASSWORD }}
        run: |
          echo "Cleaning up script on NAS..."
          sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} 'rm -f /var/services/homes/gda_jhos/deploy/deploy.sh'
          echo "Cleanup finished." 