# .github/workflows/deploy-staging.yml
name: Deploy to NAS Staging (Docker Hub)

on:
  push:
    branches:
      - master # Jalankan saat push ke branch 'master'
  workflow_dispatch: # Izinkan trigger manual

# Variabel Lingkungan untuk workflow
env:
  # Nama image di Docker Hub
  IMAGE_NAME: farrelmamengko/scraping-data
  # URL Repositori GitHub Anda (Tidak digunakan di skrip baru, tapi bisa disimpan)
  # REPO_URL: https://github.com/farrelmamengko/scraping-data.git
  # Branch yang digunakan (Tidak digunakan di skrip baru, tapi bisa disimpan)
  # GIT_BRANCH: master

jobs:
  build-and-push:
    name: Build and Push Docker Image to Docker Hub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login ke Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Setup QEMU (diperlukan untuk build multi-platform, opsional tapi bagus)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Setup Docker Buildx (untuk build yang lebih efisien)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Extract metadata (tags, labels) for Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', env.GIT_BRANCH) }}

      # Build dan push ke Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # (Opsional) Tambahkan platform jika diperlukan (misal jika NAS Anda ARM)
          # platforms: linux/amd64,linux/arm64 

  deploy-to-nas:
    name: Deploy to NAS
    needs: build-and-push # Jalankan setelah build selesai
    runs-on: ubuntu-latest

    steps:
      # 1. Install SSH client dan sshpass
      - name: Install SSH tools
        run: |
          sudo apt-get update && sudo apt-get install -y openssh-client sshpass

      # 2. Buat Skrip Deployment Lokal di Runner
      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          # Script ini akan dijalankan di NAS

          # Variabel dari Secrets GitHub (di-pass sebagai env var)
          PROJECT_PATH="${NAS_PROJECT_PATH}"
          DOCKERHUB_USER="${DOCKERHUB_USERNAME}"
          DOCKERHUB_TOKEN_SECRET="${DOCKERHUB_TOKEN}"
          IMAGE_TO_PULL="${IMAGE_NAME}:latest"

          echo "Starting deployment to $PROJECT_PATH"
          echo "Ensuring target directory exists..."
          mkdir -p "$PROJECT_PATH"
          cd "$PROJECT_PATH"

          echo "Ensuring data subdirectory and database file..."
          mkdir -p data
          touch data/database.db
          # Jika perlu izin spesifik, uncomment dan sesuaikan:
          # chmod 666 data/database.db

          # Set agar script berhenti jika ada error
          set -e

          # Mencari path Docker & Docker Compose (seperti di workflow sukses)
          docker_cmd="docker"
          compose_cmd="docker compose"
          if ! command -v docker &> /dev/null; then
            echo "Docker command not found in PATH, trying known locations..."
            for cmd_path in /usr/local/bin/docker /volume1/@appstore/Docker/usr/bin/docker /usr/bin/docker; do
              if [ -x "$cmd_path" ]; then
                docker_cmd="$cmd_path"
                echo "Found Docker at $docker_cmd"
                break
              fi
            done
          fi
          if [ "$docker_cmd" == "docker" ] && ! command -v docker &> /dev/null; then
             echo "ERROR: Docker executable not found!"
             exit 1
          fi
          # Mencari docker compose plugin atau standalone
          if ! $docker_cmd compose version &> /dev/null; then
            echo "Docker compose plugin not found, looking for standalone..."
            for cmd_path in /usr/local/bin/docker-compose /volume1/@appstore/Docker/usr/bin/docker-compose /usr/bin/docker-compose; do
               if [ -x "$cmd_path" ]; then
                 compose_cmd="$cmd_path"
                 echo "Found standalone Docker Compose at $compose_cmd"
                 break
               fi
            done
          fi
          if [ "$compose_cmd" == "docker compose" ] && ! $docker_cmd compose version &> /dev/null; then
             echo "WARNING: Docker Compose (plugin or standalone) not found. Deployment might fail if compose file needs it."
             # Kita tetap lanjut karena mungkin hanya perlu pull
          fi

          echo "Logging into Docker Hub on NAS..."
          echo "${DOCKERHUB_TOKEN_SECRET}" | $docker_cmd login -u "${DOCKERHUB_USER}" --password-stdin

          # Membuat atau memperbarui docker-compose.prod.yml DI NAS
          # Sesuaikan isi file ini jika struktur Anda berbeda
          echo "Creating/Updating docker-compose.prod.yml on NAS..."
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          services:
            app:
              container_name: skk_tender_app_staging
              image: ${IMAGE_NAME_VAR}
              ports:
                - "3001:3000"
              volumes:
                - ./data/database.db:/app/database.db
                - pdf_downloads:/app/src/download\\ pdf
              restart: unless-stopped
          volumes:
            pdf_downloads:
          EOF
          # Ganti placeholder di file compose
          sed -i "s|\\\${IMAGE_NAME_VAR}|${IMAGE_TO_PULL}|g" docker-compose.prod.yml

          echo "Pulling latest image: ${IMAGE_TO_PULL}"
          $compose_cmd -f docker-compose.prod.yml pull app

          echo "Restarting container using docker-compose.prod.yml..."
          $compose_cmd -f docker-compose.prod.yml up -d --remove-orphans

          echo "Pruning old images..."
          $docker_cmd image prune -f

          echo "Deployment successful!"

          EOL
          # Akhir dari skrip deploy.sh

          chmod +x deploy.sh
          echo "Deployment script created."

      # 3. Eksekusi Skrip di NAS via SSH menggunakan sshpass
      - name: Deploy to NAS
        env:
          # Pass secrets dan env vars ke environment sshpass
          SSHPASS: ${{ secrets.NAS_PASSWORD }}
          NAS_PROJECT_PATH: ${{ secrets.NAS_PROJECT_PATH }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          echo "Executing deployment script on NAS: ${{ secrets.NAS_HOST }}"
          # Menggunakan StrictHostKeyChecking=no dan UserKnownHostsFile=/dev/null agar tidak ada prompt host key
          # Menggunakan sshpass -e untuk membaca password dari env var SSHPASS
          cat deploy.sh | sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} "\
            export NAS_PROJECT_PATH=\"${NAS_PROJECT_PATH}\"\
            export DOCKERHUB_USERNAME=\"${DOCKERHUB_USERNAME}\"\
            export DOCKERHUB_TOKEN=\"${DOCKERHUB_TOKEN}\"\
            export IMAGE_NAME=\"${IMAGE_NAME}\"\
            bash -s\
          "
          echo "Script execution finished." 